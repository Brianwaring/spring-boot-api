server:
  port: 8066
management:
  endpoints:
    web:
      exposure:
        include: "*"
info:
  app:
    name: "driver"
    description: "Demo project for Spring Boot"
    version: "0.0.1-SNAPSHOT"
    spring-boot-version: "@project.parent.version@"

spring:
  boot:
    admin:
      client:
        url: http://localhost:8010
  datasource:
      #url: jdbc:mysql://rm-bp10s7764zpffo38x1o.mysql.rds.aliyuncs.com:3306/usthe?useUnicode=true&characterEncoding=utf-8&useSSL=false
      #username: bootshiro
      #password: Yunli123!
      driver-class-name: com.mysql.jdbc.Driver
      platform: mysql
      type: com.alibaba.druid.pool.DruidDataSource
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      # druid 配置: https://github.com/alibaba/druid/wiki/
      initialSize: 1
      minIdle: 1
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: select 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，stat用于监控界面，'wall'用于防火墙防御sql注入, slf4j用于druid记录sql日志
      filters: stat,slf4j,wall
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: false

  redis:
      database: 0
      host: 47.96.27.208
      port: 6379
      password:

  jedis:
      pool:
      # 连接池最大连接数（使用负值表示没有限制）
      max-active: 800
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: 10000
      # 连接池中的最大空闲连接
      max-idle: 20
      # 连接池中的最小空闲连接
      min-idle: 2
      # 连接超时时间（毫秒）
      timeout: 30000
  cache:
      type: redis

  # 设置使用哪个环境的配置
  # 默认的profile为dev，其他环境通过指定启动参数使用不同的profile，比如：
  #   测试环境：java -jar bootshiro.jar --spring.profiles.active=test
  #   生产环境：java -jar bootshiro.jar --spring.profiles.active=prod
  profiles:
      active: dev
  mvc:
      throw-exception-if-no-handler-found: true
  resources:
      add-mappings: false
  jwttoken:
      #多少天
      expire: 10
      key: secretkey
---
# 开发环境配置(配置项只包括环境不同项)
spring:
    profiles: dev
    datasource:
      url: jdbc:mysql://cd-cdb-59nqoifh.sql.tencentcdb.com:63989/logistics?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: WqscTEST2018
    redis:
      # 服务器IP地址
      host: 47.96.27.208
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:

---
# 测试环境配置(配置项只包括不同项)

spring:
    profiles: test
    datasource:
      url: jdbc:mysql://cd-cdb-59nqoifh.sql.tencentcdb.com:63989/logistics?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: WqscTEST2018
    redis:
      # 服务器IP地址
      host: 47.96.27.208
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:

---
# 生产环境配置(配置项只包括不同项)

spring:
    profiles: prod
    datasource:
      url: jdbc:mysql://cd-cdb-59nqoifh.sql.tencentcdb.com:63989/logistics?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: WqscTEST2018
    redis:
      # 服务器IP地址
      host: 47.96.27.208
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:

#server.port = 8099
#spring.datasource.url=jdbc:mysql://cd-cdb-59nqoifh.sql.tencentcdb.com:63989/logistics
#spring.datasource.username=root
#spring.datasource.password=WqscTEST2018
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#spring.jpa.show-sql=true
#spring.jpa.database=mysql
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#出现错误时, 直接抛出异常
#spring.mvc.throw-exception-if-no-handler-found=true
#不要为我们工程中的资源文件建立映射
#spring.resources.add-mappings=false